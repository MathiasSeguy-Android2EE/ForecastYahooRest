apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.android2ee.formation.restservice.forecastyahoo.withlibs"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        //if you want your test to be found using JUnit4
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            // Run code coverage reports by default on debug builds.
            // testCoverageEnabled = true
        }
    }

    //Give a name to your dimension
    flavorDimensions "test_env"
    // If you need to add more flavors, consider using flavor dimensions.
    productFlavors {
        mock {
            dimension "test_env"
            applicationIdSuffix = ".mock"
        }
        prod {
            dimension "test_env"

        }
    }

    // Remove mockRelease and ProdDebug as it's not needed.
    android.variantFilter { variant ->
        if(variant.buildType.name.equals('release')
                && variant.getFlavors().get(0).name.equals('mock')) {
            variant.setIgnore(true);
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.android.support:appcompat-v7:${supportLibraryVersion}"
    implementation "com.android.support:recyclerview-v7:${supportLibraryVersion}"
    implementation "com.android.support:cardview-v7:${supportLibraryVersion}"
    implementation "com.android.support:design:${supportLibraryVersion}"

    // I want eventBus
    implementation "org.greenrobot:eventbus:${eventBusVersion}"

    // I want SugarOrm
    implementation "com.github.satyan:sugar:${sugarOrmVersion}"

    // I want Retrofit,OkIo, OkHttp and Moshi
    implementation "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    implementation "com.squareup.retrofit2:converter-moshi:${retrofitVersion}"
    implementation "com.squareup.okhttp3:okhttp:${okhttpVersion}"
    implementation "com.squareup.okhttp3:logging-interceptor:${okhttpLoginInterceptVersion}"
    implementation "com.squareup.okio:okio:${okioVersion}"

    // I want JodaTime not to drive nuts managing date
    implementation "net.danlew:android.joda:${jodaTimeVersion}"

    //For the Tests !!!
    // Dependencies for unit tests
    testImplementation "junit:junit:${junitVersion}"

    //for unit tests
    testImplementation "org.mockito:mockito-all:$rootProject.ext.mockitoVersion"
    // Android Testing Support Library's runner and rules
    androidTestImplementation "com.android.support.test:runner:$rootProject.ext.runnerVersion"
    androidTestImplementation "com.android.support.test:rules:$rootProject.ext.rulesVersion"
    // Espresso UI Testing dependencies.
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$rootProject.ext.espressoVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-intents:$rootProject.ext.espressoVersion"
    // Espresso-contrib for DatePicker, RecyclerView, Drawer actions, Accessibility checks, CountingIdlingResource

    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:$rootProject.ext.espressoVersion"
    implementation "com.android.support.test.espresso:espresso-idling-resource:$rootProject.ext.espressoVersion"
}

/*
Resolves dependency versions across test and production APKs, specifically, transitive
dependencies. This is required since Espresso internally has a dependency on support-annotations.
*/
configurations.all {
    resolutionStrategy.force "com.android.support:support-annotations:${supportLibraryVersion}"
}

/*
All direct/transitive dependencies shared between your test and production APKs need to be
excluded from the test APK! This is necessary because both APKs will contain the same classes. Not
excluding these dependencies from your test configuration will result in an dex pre-verifier error
at runtime. More info in this tools bug: (https://code.google.com/p/android/issues/detail?id=192497)
*/
configurations.compile.dependencies.each { compileDependency ->
    println "Excluding compile dependency: ${compileDependency.getName()}"
    configurations.androidTestCompile.dependencies.each { androidTestCompileDependency ->
        configurations.androidTestCompile.exclude module: "${compileDependency.getName()}"
    }
}