apply plugin: 'com.android.application'
/**
 * Our variables definition for the build script
 */
apply from: 'gradle/var_definition.gradle'
/**
 * For JAvaCOdeCOverage
 */
apply plugin: 'jacoco'
/**
 * For Fabrics
 */
apply plugin: 'io.fabric'
/**
 * Our file to enable code coverage using JAvaCOdeCOverage
 */
apply from: 'gradle/toolsReporter/jacoco.gradle'
/**
 * Used to deploy on Nexus our apk
 */
apply plugin: 'maven'
/**
 * This plugin provides a task to generate a HTML license report based on the configuration
 * You can find the plugin project here :https://github.com/cookpad/license-tools-plugin
 */
//apply plugin: 'com.cookpad.android.licensetools' TODO

android {
    compileSdkVersion project.compileSdkVersion

    defaultConfig {
        applicationId "com.android2ee.formation.restservice.sax.forecastyahoo"
        minSdkVersion project.minSdkVersion
        targetSdkVersion project.targetSdkVersion
        versionCode project.versionCode
        versionName project.versionName
        //if you want your test to be found using JUnit4
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        vectorDrawables.useSupportLibrary = project.useSupportLibVectorDrawable
    }

    /***********************************************************
     *  Defining and Loading Properties
     **********************************************************/
    apply from: 'gradle/load_accounts.gradle'
    /***********************************************************
     *  Signing
     **********************************************************/
    signingConfigs {
        debug {
            storeFile project.ext.JKSFile
            storePassword project.ext.JKSPassword
            keyAlias project.ext.JKSKeyAlias
            keyPassword project.ext.JKSKeyPassword
        }
        release {
            storeFile project.ext.JKSFile
            storePassword project.ext.JKSPassword
            keyAlias project.ext.JKSKeyAlias
            keyPassword project.ext.JKSKeyPassword
        }
    }

    /***********************************************************
     *  Default values for all variants
     **********************************************************/
    //define default value for your attibutes
    defaultConfig {
        //How to define a BuildConfig attribute
        buildConfigField("boolean", "isallowed", "true")
        buildConfigField("String", "isStringallowed", '\"quarante trois\"')
        buildConfigField("int", "intAllowed", "3")
        //How to add element in your R class
        resValue "string", "hidden_string", "I love you my sweety"
        resValue "color", "color_var", "#FF00ff"
        resValue "bool", "isBoolAllowed", "true"
    }



    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //add tests coverage using Jacoco
            testCoverageEnabled false
        }
        debug {
            // Run code coverage reports by default on debug builds.
            // testCoverageEnabled = true
            signingConfig signingConfigs.debug
            applicationIdSuffix '.debug'
            versionNameSuffix '.debug'
            //add tests coverage using Jacoco
            testCoverageEnabled true
            useProguard false
        }
    }

    /**
     * You should not do that
     */
    lintOptions {
        abortOnError false
    }
    /***********************************************************
     *  Managing flavors
     **********************************************************/
    //Give a name to your dimension
    flavorDimensions "test_env"
    // If you need to add more flavors, consider using flavor dimensions.
    productFlavors {
        mock {
            dimension "test_env"
            applicationIdSuffix = ".mock"
        }
        prod {
            dimension "test_env"
        }
    }
    /***********************************************************
     *  Apply the build hooks here
     **********************************************************/
    apply from: 'gradle/builds_hooks.gradle'

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.android.support:appcompat-v7:${supportLibraryVersion}"
    implementation "com.android.support:recyclerview-v7:${supportLibraryVersion}"
    implementation "com.android.support:cardview-v7:${supportLibraryVersion}"
    implementation "com.android.support:design:${supportLibraryVersion}"
    implementation "android.arch.persistence.room:runtime:${archi_components_version}"
    implementation 'com.android.support.constraint:constraint-layout:1.1.1'
    annotationProcessor "android.arch.persistence.room:compiler:${archi_components_version}"
    implementation "android.arch.lifecycle:extensions:${archi_components_version}"
    annotationProcessor "android.arch.persistence.room:compiler:${archi_components_version}"
    androidTestImplementation "android.arch.core:core-testing:${archi_components_version}"
    implementation "com.android.support.constraint:constraint-layout:${constraint_layout_version}"
    implementation "android.arch.work:work-runtime:${archi_workmanager_version}"
    androidTestImplementation "android.arch.work:work-testing:${archi_workmanager_version}"
    implementation "android.arch.paging:runtime:${archi_paging_version}"
    testImplementation "android.arch.paging:common:${archi_paging_version}"

    implementation "com.facebook.stetho:stetho:1.5.0"
    implementation "com.facebook.stetho:stetho-okhttp3:1.5.0"

    // I want eventBus
    implementation "org.greenrobot:eventbus:${eventBusVersion}"


    // I want Retrofit,OkIo, OkHttp and Moshi
    implementation "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    implementation "com.squareup.retrofit2:converter-moshi:${retrofitVersion}"
    implementation "com.squareup.okhttp3:okhttp:${okhttpVersion}"
    implementation "com.squareup.okhttp3:logging-interceptor:${okhttpLoginInterceptVersion}"
    implementation "com.squareup.okio:okio:${okioVersion}"

    // I want JodaTime not to drive nuts managing date
    implementation "net.danlew:android.joda:${jodaTimeVersion}"

    //For the Tests !!!
    // Dependencies for unit tests
    testImplementation "junit:junit:${junitVersion}"

    //for unit tests
//    testImplementation "org.mockito:mockito-all:$project.mokitoVersion"
    // required if you want to use Mockito for unit tests
    testImplementation "org.mockito:mockito-core:$project.mokitoVersion"
    // required if you want to use Mockito for Android tests
    androidTestImplementation "org.mockito:mockito-android:$project.mokitoVersion"
    // Android Testing Support Library's runner and rules
    androidTestImplementation "com.android.support.test:runner:$project.runnerVersion"
    androidTestImplementation "com.android.support.test:rules:$project.rulesVersion"
    // Espresso UI Testing dependencies.
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$project.espressoVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-intents:$project.espressoVersion"
    // Espresso-contrib for DatePicker, RecyclerView, Drawer actions, Accessibility checks, CountingIdlingResource

    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:$project.espressoVersion"
    implementation "com.android.support.test.espresso:espresso-idling-resource:$project.espressoVersion"
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.3@aar') {
        transitive = true;
    }
}
/***********************************************************
 *  Apply your check here
 **********************************************************/
apply from: 'gradle/tools_reporter.gradle'
apply from: 'gradle/release.gradle'

/*
Resolves dependency versions across test and production APKs, specifically, transitive
dependencies. This is required since Espresso internally has a dependency on support-annotations.
*/
configurations.all {
    resolutionStrategy.force "com.android.support:support-annotations:${supportLibraryVersion}"
}

/*
All direct/transitive dependencies shared between your test and production APKs need to be
excluded from the test APK! This is necessary because both APKs will contain the same classes. Not
excluding these dependencies from your test configuration will result in an dex pre-verifier error
at runtime. More info in this tools bug: (https://code.google.com/p/android/issues/detail?id=192497)
*/
configurations.compile.dependencies.each { compileDependency ->
    println "Excluding compile dependency: ${compileDependency.getName()}"
    configurations.androidTestCompile.dependencies.each { androidTestCompileDependency ->
        configurations.androidTestCompile.exclude module: "${compileDependency.getName()}"
    }
}
