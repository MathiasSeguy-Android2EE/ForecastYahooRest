//based on this article
//https://medium.com/@rafael_toledo/setting-up-an-unified-coverage-report-in-android-with-jacoco-robolectric-and-espresso-ffe239aaf3fa

apply plugin: 'jacoco'
/***********************************************************
 *  This is your Jacoco script
 **********************************************************/

/***********************************************************
 *  Attributes
 **********************************************************/
//define which classes to exclude
def fileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*$ViewInjector*.*',
        '**/*$ViewBinder*.*',
        '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
        '**/*Module.*', // Modules for Dagger.
        '**/*Dagger*.*', // Dagger auto-generated code.
        '**/*MembersInjector*.*', // Dagger auto-generated code.
        '**/*_Provide*Factory*.*',
        '**/*_Factory.*', //Dagger auto-generated code
        '**/*$*$*.*', // Anonymous classes generated by kotlin
        //add libraries
        'android/**/*.*',
        'uk/**/*.*',
        'io/**/*.*',
        //remove what we don't test
        'androidTest/**/*.*',
        'test/**/*.*',
        '**/injector/**/*.*',
        '**/model/**/*.*',
        '**/mock/**/*.*',
        '**/event/**/*.*',
        '**/*EventType.*',
        '**/**Mocked',
        '**/AssesmentOperation.*'
]

/***********************************************************
 *  Main task
 **********************************************************/
task jacocoTestReport(type: JacocoReport, dependsOn: [
        //you depend on nothing because it's called by gWR...but
        //if you want to just generate your reports from scratch uncomment those lines
//        ':app:assembleBasileMultiplicationDebug',
]) {
    group = project.ext.myGradleGroup
    description ="Launch the code coverage analysis for the apk."
    reports {
        xml.enabled = true
        html.enabled = true
        xml {
            destination new File("$reportsDir/jacoco/jacocoReport.xml")
        }
        html {
            destination new File("$reportsDir/jacoco/")
        }
    }

    //Define exactly where are the class in your Build folder to analyze
    def debugTreeBasile = fileTree(dir: "${buildDir}/intermediates/classes/prod/release",
            excludes: fileFilter)
    def mainSrc = files(["src/main/java"])


    //Where are your sources:
    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTreeBasile])
    //As you want to gather all your tests reports, add the ec and exec you want to be took into
    //account when generating the report
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testMockDebugUnitTest.exec",
            "jacoco/testProdDebugUnitTest.exec",
            "outputs/code-coverage/connected/flavors/**/*coverage.ec"
    ])
}