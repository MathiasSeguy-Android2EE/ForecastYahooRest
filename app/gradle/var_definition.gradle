/***********************************************************
 *  Gradle definition file of our dynamic variables
 **********************************************************/
println 'in the var_defintion'
//Import  the variable definiton of the version for google jetpack
apply from: 'gradle/google_lib_version.gradle'

/**The file project_reference handles the following information */
/**This is the Main information for the projectapp
project.ext {
    //The Id of the application
    applicationId = NOT_DEFINED
    //The version code, integer, can not decrease
    versionCode = NOT_DEFINED
    //The majorVersion, To be increased for every major Release
    versionName = 0
    //The minorVersion,to be increased for every minor release
    minorVersion = 0
    //The buildNumber to increased for every build generation
    buildNumber = NOT_DEFINED
    //The version name, can be anything, but will be generated
    versionName = majorVersion + '.' + minorVersion + '.' + buildNumber
    The gradle name to gather gradle task into the same sub folder
    myGradleGroup = app
}*/
/***********************************************************
 *  Then define you attibutes/variables
 *  You need to define that way for others file to know them
 *  Others gradle file can not call the method (or I didn't find yet)
 **********************************************************/
/**
 * For the list of available formats:
 * http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html
 * Use this definition to obtain the date at the format
 * @return The date as a string
 */
def getDateTime() {
    return new Date().format("MMdd")
}
/***********************************************************
 *  Define the methods that calculate your variables
 **********************************************************/
def getWeekNumber() {
    return new Date().format("w+")
}
def getYearNumber() {
    return new Date().format("YYYY")
}
def getReadableSchoolDate() {
    return new Date().format("dd MMM YYYY hh:mm")
}
/**
 * Return apk current
 * @return
 */
def apkCurrentSuffix(){
    def_branche_name+'_'+getDateTime()
}
project.ext{
    compileSdk = 28
    // min SDK is set to 18
    minSdk = 18
    targetSdk = 28
    //You have the definiton
    //Please use the support library and use
    useSupportLibVectorDrawable = true

    //build var
    def_time_format=getDateTime()
    def_readableSchoolDate=getReadableSchoolDate()
    def_branche_name=branch()
    def_commit_number=commitNumber()
    def_current_apk_name=apkCurrentSuffix()
    def_apk_name_wrelease=apkWReleaseSuffix()

//Current libraries versions
    //in your SDK manager
    buildToolsVersion = "28.0.3"

    //https://developer.android.com/training/testing/espresso/setup.html
    //http://junit.org/junit5/
    junit_junit_Version = "4.12"//->JUnit 5 is on the road need to be tested
    //tests
    //https://github.com/mockito/mockito/releases
    orgMockito_mockitoCore_Version = "2.19.0"
    //https://github.com/googlemaps/android-maps-utils/releases
    comGoogleMapsAndroid_androidMapsUtils = "0.5"

    orgJetbrainsKotlin_kotlinStdlibJdk7_Version =  "1.3.1"
    //natural libs
    //https://github.com/greenrobot/EventBus/releases
    orgGreenrobot_eventbus_Version = "3.1.1"
    //https://github.com/f2prateek/dart/releases
    comF2prateekDart_dart_Version = "2.0.3"
    comF2prateekDart_dartProcessor_Version = comF2prateekDart_dart_Version
    comF2prateekDart_henson_Version = comF2prateekDart_dart_Version
    comF2prateekDart_hensonProcessor_Version = comF2prateekDart_dart_Version

    //http communication
    //http://square.github.io/retrofit/
    comSquareupRetrofit2_retrofit_Version = "2.4.0"
    comSquareupRetrofit2_converterMoshi_Version = comSquareupRetrofit2_retrofit_Version
    //http://square.github.io/okhttp/
    comSquareupOkhttp3_okhttp_Version = "3.11.0"
    comSquareupOkhttp3_loggingInterceptor_Version = comSquareupOkhttp3_okhttp_Version
    //https://github.com/square/moshi/releases
    comSquareupMoshi_moshi_Version = "1.7.0"
    //https://github.com/square/okio/releases
    comSquareupOkio_okio_Version = "1.16.0"
    //https://github.com/facebook/network-connection-class/releases
    comFacebookNetworkConnectionclass_connectionclass_Version = "1.0.1"

    //GDirectionApiUtil
    gDirectionApiUtilVersion = "1.1.0"
    //debug tools
    //https://github.com/square/leakcanary/releases
    comSquareupLeakcanary_leakcanaryAndroidNoOp_Version = "1.6.3"
    comSquareupLeakcanary_leakcanaryAndroid_Version = comSquareupLeakcanary_leakcanaryAndroidNoOp_Version
    //https://fabric.io/kits/android/crashlytics/install
    comCrashlyticsSdkAndroid_crashlytics_Version = "2.9.3@aar"

    //Joda Time
    jodaTimeVersion = '2.9.2'
    // Batch
    comBatchAndroid_batchSdk_Version="1.12+"
    //https://mvnrepository.com/artifact/org.json/json
    orgJson_json_Version = "20180130"

    //facebook analyse tools
    //http://facebook.github.io/stetho/#download
    comFacebookStetho_stetho_Version = "1.5.0"
    comFacebookStetho_stethoOkhttp3_Version = comFacebookStetho_stetho_Version
    //MPAndroidChart Library
    comGithubPhilJay_MPAndroidChart_Version = "v3.0.3"

    // Picasso (Image downloading and caching)
    comSquareupPicasso_picasso_Version = "2.71828"

}
/**
 * Return apk weekly release
 * app-prod-debug_dev-0.5.0.0+2017w16.BuildCommit.apk
 * '_'+def_branche_name+'_w'+getWeekNumber()
 * '_'+versionName+'+getYearNumber()_w'+getWeekNumber()+"."+def_commit_number
 * @return
 */
def apkWReleaseSuffix(){
    '_'+versionName+'.'+versionCode+'+'+getYearNumber()+'_w'+getWeekNumber()+"."+def_commit_number
}
/**
*Find the branch name of the build
*this is a function
 * */
def branch() {
    def branch = ""
    def branchName = ""
    def command = hasProperty('gitPath') ? gitPath : 'git';
    //Find the branch name
    try{
        def proc = "${command} rev-parse --abbrev-ref HEAD".execute()
        proc.in.eachLine { line -> branch = line }
        proc.err.eachLine { line -> println line }
        proc.waitFor()
        branchName='transient'
        if(branch.startsWith('dev')) {
            branchName='dev'
        } else if (branch.startsWith('release') ||
                branch.startsWith('bugfix') ||
                branch.startsWith('hotfix')) {
            branchName='staging'
        } else if(branch.startsWith('master')) {
            branchName='master'
        }
        println 'Branch name is equals to '+branch
    }catch(Exception exc){
        branchName='nogit'
        println 'Branch name is equals to '+branchName
    }finally {
        println 'InFinally Branch name is equals to '+branchName
        return branchName
    }
}

def commitNumber(){    
    def commitNum = ""
    try{
        def command = hasProperty('gitPath') ? gitPath : 'git';
        def proc = "${command} rev-list --count  ${def_branche_name}".execute()
        proc.in.eachLine { line -> commitNum = line }
        proc.err.eachLine { line -> println line }
        proc.waitFor()
        println 'The commit number is '+commitNum
    }catch(Exception exc){
        commitNum='0'
    }finally {
        println 'InFinally The commit number is '+commitNum
        return commitNum
    }
}
