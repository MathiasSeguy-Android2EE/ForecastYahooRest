//DONE 12/04/2019
project.ext {
//Gloabl
     sourceAll = 'src/main/java'
     sourceAllFiles = files([sourceAll])

//PMD Paths
     pmdConfigDir = "gradle/toolsReporter/"
     pmdReportsDir = "${project.buildDir}/reports"
     pmdRuleSetFile = files("$pmdConfigDir/pmd/pmd-ruleset.xml")
     pmdDestinationXml = new File("$pmdReportsDir/pmd/pmd.xml")
     pmdDestinationHtml = new File("$pmdReportsDir/pmd/pmd.html")

//JavaDoc
    /***********************************************************
     *  Javadoc operational
     **********************************************************/
     javadocDestinationDir = file("${project.buildDir}/reports/javadoc/nci_2/")

//Jacoco
/***********************************************************
 *  Jacoco:
 *  Normaly path is ok  now
 *  [MSE_20/03/2019]but can not be tested because our tests failed
 **********************************************************/
    //ine which classes to exclude
     jacocoExcludedFiles = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
            '**/*Module.*', // Modules for Dagger.
            '**/*Dagger*.*', // Dagger auto-generated code.
            '**/*MembersInjector*.*', // Dagger auto-generated code.
            '**/*_Provide*Factory*.*',
            '**/*_Factory.*', //Dagger auto-generated code
            '**/*$*$*.*', // Anonymous classes generated by kotlin
            //add libraries
            'android/**/*.*',
            'com/**/*.*',
            'uk/**/*.*',
            'io/**/*.*',
            //remove what we don't test
            'androidTest/**/*.*',
            'test/**/*.*',
            '**/injector/**/*.*',
            '**/model/**/*.*',
            '**/mock/**/*.*',
            '**/event/**/*.*',
            '**/fundation/**/*.*',
            '**/fundation/*.*',
            '**/**_ViewBinding**',
            '**/*EventType.*',
            '**/*CountDownUtil.*',
            '**/*/roamingdots/*.*',
            '**/**Mocked',
            // androidTest are not required for the Jacoco Reports
            'androidTest/*.*',
            // unitTest are not required for the Jacoco Reports
            'testProd/*.*'
    ]
    //TODO Needs to change the path
//for Prod
    //Define your source and your classes: we want to test the production code
     jacocoDebugTreeProd = fileTree(dir:
            "${buildDir}/intermediates/app_classes/e2elegacyProdDebug/bundleE2elegacyProdDebugClasses",
            excludes: jacocoExcludedFiles)

     jacocoProdFilesIncluded = [//50%
                                "jacoco/testProdDebugUnitTest.exec",//3%
                                "outputs/code-coverage/connected/flavors/PROD/*coverage.ec"//42%
    ]
//For Mock
     jacocoDebugTreeMock = fileTree(dir:
             "${buildDir}/intermediates/app_classes/e2elegacyMockDebug/bundleE2elegacyMockDebugClasses",
             excludes: jacocoExcludedFiles)
//42%

     jacocoMockFilesIncluded = [//50%
                                "jacoco/testMockDebugUnitTest.exec",//5%
                                "outputs/code-coverage/connected/flavors/MOCK/*coverage.ec",//36%
    ]

//Fidnbugs
     findbugsExcludeFilter = new File("gradle/toolsReporter/findbugs/findbugs-filter.xml")
     findbugsClasses = files("${buildDir}/intermediates/app_classes/prodDebug/packageAppClassesProdDebug")
     findbugsDestinationXml = new File("$reportsDir/findbugs/findbugs.xml")
     findbugsDestinationHtml = new File("$reportsDir/findbugs/findbugs.html")
}